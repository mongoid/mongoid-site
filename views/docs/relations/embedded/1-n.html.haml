- content_for :head do
  %title Mongoid: Relations [Embedded: 1-n]

%h1 embedded one to many

%p= image_tag "/images/embedded-1-n.png", class: "diagram"

%p
  One to many relationships where the children are embedded in the parent
  document are defined using Mongoid's <tt>embeds_many</tt> and
  <tt>embedded_in</tt> macros.

%h3 defining

%p
  The parent document of the relation should use the <tt>embeds_many</tt>
  macro to indicate it has <i>n</i> number of embedded children, where
  the document that is embedded uses <tt>embedded_in</tt>.

:coderay
  #!ruby

  class Person
    include Mongoid::Document
    embeds_many :addresses
  end

  class Address
    include Mongoid::Document
    field :city, type: String
    field :country, type: String
    embedded_in :person
  end

%p
  Definitions are required on both sides to the relation in order for it to
  work properly.

%h3 storage

%p
  Documents that are embedded using the <tt>embeds_many</tt> macro are stored
  as an array of hashes inside the parent in the parent's database
  collection.

:coderay
  #!javascript

  {
    "_id" : ObjectId("4d3ed089fb60ab534684b7e9"),
    "addresses" : [
      {
        "_id" : ObjectId("4d3ed089fb60ab534684b7e0"),
        "city" : "Berlin",
        "country" : "Deutschland"
      }
    ]
  }

%h3 accessors

%p
  Accessing the relations is handled through the methods created based on the
  names of the relations. The following example shows basic access on both
  sides of the relation.

:coderay
  #!ruby

  # Return the child addresses.
  person.addresses

  # Set the child addresses.
  person.addresses = [ Address.new ]

  # Return the parent person.
  address.person

  # Set the parent person.
  address.person = Person.new

%h3 building and creating

%p
  From the parent side, documents in the embedded child can be appended to using
  traditional array syntax or the special association proxy methods. On the
  child side the only option is to replace the existing with a newly built or
  created document.

:coderay
  #!ruby

  # Append one or many child addresses, saving them if the person is persisted.
  person.addresses << Address.new
  person.addresses.push(Address.new)
  person.addresses.concat([ address ])

  # Appends and returns a new child address from the attirbutes.
  person.addresses.build(city: "Berlin")
  person.addresses.new(city: "Berlin")

  # Appends, saves, and returns a new child address from the attirbutes.
  person.addresses.create(city: "Berlin")

  # Appends, saves, and returns a new child address from the attributes,
  # raising an error if validation fails.
  person.addresses.create!(city: "Berlin")

  # Replace the parent with a new one from the attributes.
  address.build_person(title: "Prince")

  # Replace the parent with a newly saved one from the attributes.
  address.create_person(title: "Prince")

%h3 removal

%p
  Documents in the embedded many can be removed in several different manners,
  either through the relation, criteria, or accessors.

:coderay
  #!ruby

  # Delete all documents
  person.addresses.delete_all
  person.addresses.clear
  person.addresses = []

  # Delete all matching documents.
  person.addresses.delete_all(conditions: { city: "Berlin" })
  person.addresses.where(city: "Berlin").delete_all

  # Destroy all documents, running destroy callbacks.
  person.addresses.destroy_all

  # Destroy all matching documents, running callbacks.
  person.addresses.destroy_all(conditions: { city: "Berlin" })
  person.addresses.where(city: "Berlin").destroy_all

  # Delete the parent document (Note this also deletes all children.)
  address.person.delete

  # Destroy the parent document (Note this also deletes all children.)
  address.person.destroy

%h3 finding

%p
  Finding documents in the embedded children is handled through <tt>find</tt>
  or by using chained criteria on the relation.

:coderay
  #!ruby

  # Find a child by a single or multiple ids.
  person.addresses.find(id)
  person.addresses.find([ id_one, id_two ])

  # Find matching children.
  person.addresses.where(city: "Berlin")

  # Find or create a matching (saved) child.
  person.addresses.find_or_create_by(city: "Berlin")

  # Find or initialize a matching (new) child.
  person.addresses.find_or_initialize_by(city: "Berlin")

  # Do any children exist that are persisted?
  person.addresses.exists?

  # Paginate the child documents.
  person.addresses.paginate(page: 2, per_page: 20)

%h3 polymorphic behaviour

%p
  When a child embedded document can belong to more than one type of parent
  document, you can tell Mongoid to support this by adding the <tt>as</tt>
  option to the definition on the parents, and the <tt>polymorphic</tt>
  option on the child.

:coderay
  #!ruby

  class Office
    include Mongoid::Document
    embeds_many :addresses, as: :locatable
  end

  class Person
    include Mongoid::Document
    embeds_many :addresses, as: :locatable
  end

  class Address
    include Mongoid::Document
    embedded_in :locatable, polymorphic: true
  end

%h3 recursive embedding / cyclic relations

%p
  A document can recursively embed itself using <tt>recursively_embeds_many</tt>, which
  provides accessors for the parent and children.

:coderay
  #!ruby

  class Tag
    include Mongoid::Document
    recursively_embeds_many
    field :name
  end

  programming = Tag.new(:name => 'programming')
  ruby = programming.child_tags.build(:name => 'ruby')
  python = programming.child_tags.build(:name => 'python')

  programming.child_tags  # [ruby, python]
  ruby.parent_tag         # [programming]
  python.parent_tag       # [programming]
