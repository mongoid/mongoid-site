- content_for :head do
  %title Mongoid: Installation [Configuration]

%h1 configuration

%p
  Mongoid configuration can be done through a <tt>mongoid.yml</tt> that
  specifies your options and database connections. The simplest configuration
  is as follows, which uses default options and connects to a single local
  master db on port 27017:

:coderay
  #!ruby
  host: localhost
  database: godfather

%h3 rails applications

%p
  You can generate a config file by executing the generator and then editing
  <tt>myapp/config/mongoid.yml</tt> to your heart's desire. Mongoid will
  then handle everything else from there.

:coderay
  #!ruby
  $ rails g mongoid:config

%p
  Now that you have a <tt>mongoid.yml</tt> you can't wait to delete that
  pesky <tt>database.yml</tt>, right? Do it and you'll start getting
  <tt>ActiveRecord</tt> errors all over the place.
  You don't need ActiveRecord unless you're trying to use Mongo in concert
  with a SQL database. Here's how you remove ActiveRecord from the most
  recent version of Rails 3...

%p
  Open <tt>myapp/config/application.rb</tt> and near the top, remove the line
  <tt>require 'rails/all'</tt> and add the following
  three lines so you end up with this:

:coderay
  #!ruby
  require "action_controller/railtie"
  require "action_mailer/railtie"
  require "active_resource/railtie"
  require "rails/test_unit/railtie"
  # require "sprockets/railtie" # Uncomment this line for Rails 3.1+

%h3 sinatra, padrino, and others

%p
  You can create your <tt>mongoid.yml</tt> and place it anywhere you like.
  Just be sure that on application initialization you do the following:

:coderay
  #!ruby
  Mongoid.load!("path/to/your/mongoid.yml")

%p
  If you want to configure Mongoid programatically, this is possible as
  well.

:coderay
  #!ruby
  Mongoid.configure do |config|
    config.master = Mongo::Connection.new.db("godfather")
  end

%h3 configuration options

%p
  Mongoid currently supports the following configuration options, either
  provided in the mongoid.yml or programatically [ defaults in
  brackets ].

:coderay
  #!ruby
  allow_dynamic_fields [true]

%p
  When attributes are not defined as fields but
  added to an object, they will get fields added for them dynamically and
  will get persisted. If set to false an error will get raised when
  attempting to set a value that has no field defined.

:coderay
  #!ruby
  autocreate_indexes [false]

%p
  When set to true Mongoid will attempt to create indexes each time a class
  is loaded. This is not recommended for any environment other than development
  or test.

:coderay
  #!ruby
  include_root_in_json [false]

%p
  When set to true mongoid will include the name of the root document
  and the name of each association as the root element when calling
  <tt>#to_json</tt> on a model.

:coderay
  #!ruby
  max_retries_on_connection_failure [0]

%p
  If you would like Mongoid to retry operations if a
  <tt>Mongo::ConnectionFailure</tt> occurs you may specify this option
  in your config. Mongoid will retry the operation every half second up
  to the limit that is set. This is particularly useful when using
  replica sets.

:coderay
  #!ruby
  parameterize_keys [true]

%p
  Tells Mongoid to convert basic special characters in composite keys
  to SEO friendly substrings.

:coderay
  #!ruby
  persist_in_safe_mode [false]

%p
  Tells Mongoid to perform all database
  operations in MongoDB's safe mode. This will cause the driver to double
  check operations and raise an error if they failed. Switching to true
  will be safe but will be a slight performance hit.

:coderay
  #!ruby
  raise_not_found_error [true]

%p
  Will raise a Mongoid::Errors::DocumentNotFound
  when attempting to find a document by an id that doesnt exist.
  When set to false will only return nil for the same query.

:coderay
  #!ruby
  skip_version_check [false]

%p
  If you are having issues authenticating against
  MongoHQ or MongoMachine because of access to the system collection being
  not allowed, set this to true.

%h3 Logging

%p
  You can define your own logger for Mongoid if you do not want to use the default
  Rails logger in your Rails' <tt>application.rb</tt>.

:coderay
  #!ruby
  module MyApplication
    class Application << Rails::Application
      config.mongoid.logger = Logger.new($stdout, :warn)
    end
  end

%p
  For custom logging outside of Rails, set the Mongoid logger directly.

:coderay
  #!ruby
  Mongoid.logger = Logger.new($stdout)

