---
title: Installation
author: Durran Jordan
category: docs
---
.text
  Get the Mongoid gem from rubygems.org:

  %pre
    %code.language-ruby
      :preserve
        gem install mongoid --pre

  For performance improvements you will want to also install the mongo c extensions if
  compatible with your system.

  %pre
    %code.language-ruby
      :preserve
        gem install bson_ext

  For Rails applications add the gem dependency to your <tt>Gemfile</tt>:

  %pre
    %code.language-ruby
      :preserve
        gem "mongoid", "2.0.0.beta.17"
        gem "bson_ext", "1.0.4"

  Setup of the database connection itself is handled by using automatic configuration with
  a <tt>config/mongoid.yml</tt>. You can generate a mongoid.yml via the following command:

  %pre
    %code.language-ruby
      :preserve
        rails generate mongoid:config

  %p
    Executing this will also switch your default ORM to Mongoid
    (i.e. <tt>rails g model</tt> will now generate Mongoid <tt>Documents</tt>
    as your models):

  %p
    An example configuration is as follows, with the default values showing:

  <tt>config/mongoid.yml</tt>:
  %pre
    %code.language-yaml
      :preserve
        defaults: &defaults
          host: localhost
          slaves:
            - host: slave1.local
              port: 27018
            - host: slave2.local
              port: 27019
          autocreate_indexes: false
          allow_dynamic_fields: true
          include_root_in_json: false
          parameterize_keys: true
          persist_in_safe_mode: false
          raise_not_found_error: true
          reconnect_time: 3

        development:
          &lt;&lt;: *defaults
          database: control_development

        test:
          &lt;&lt;: *defaults
          database: control_test

        # set these environment variables on your prod server
        production:
          &lt;&lt;: *defaults
          host: &lt;%= ENV['MONGOID_HOST'] %>
          port: &lt;%= ENV['MONGOID_PORT'] %>
          database: &lt;%= ENV['MONGOID_DATABASE'] %>

  %br
.title Configuration
.text
  %p
    Mongoid currently supports the following configuration options in
    the mongoid.yml shown above:

  %p
    <tt>allow_dynamic_fields</tt>: When attributes are not defined as fields but
    added to an object, they will get fields added for them dynamically and will get
    persisted. This defaults to true, and if set to false an error will get raised when
    attempting to set a value that has no field defined.

  %p
    <tt>autocreate_indexes</tt>: Defaults to false. When set to true Mongoid will attempt to
    create indexes each time a class is loaded. This is not recommended for any environment
    other than development or test.

  %p
    <tt>include_root_in_json</tt>: Defaults to false. When set to true mongoid will
    include the name of the root document and the name of each association as the
    root element when calling <tt>#to_json</tt> on a model.

  %p
    <tt>parameterize_keys</tt>: Tells Mongoid to convert basic special
    characters in composite keys to SEO friendly substrings. Defaults to true.

  %p
    <tt>persist_in_safe_mode</tt>: Tells Mongoid to perform all database
    operations in MongoDB's safe mode. This will cause the driver to double
    check operations and raise an error if they failed. Defaults to false,
    switching to true will be safe but will be a performance hit.

  %p
    <tt>raise_not_found_error</tt>: Will raise a Mongoid::Error::DocumentNotFound
    when attempting to find a document by an id that doesnt exist.
    Defaults to true, but when set to false will only return nil
    for the same query.

  %p
    <tt>reconnect_time</tt>: Tells Mongoid the max time to attempt reconnection
    to the database if a connection failure has occured. Default is 3 seconds.

  %p
    <tt>skip_version_check</tt>: If you are having issues authenticating against
    MongoHQ or MongoMachine because of access to the system collection being
    not allowed, set this to true.

.title Logging
.text
  You can define your own logger for Mongoid if you do not want to use the default
  Rails logger in your Rails' <tt>application.rb</tt>.

  %pre
    %code.language-ruby
      :preserve
        module MyApplication
          class Application &lt; Rails::Application
            config.mongoid.logger = Logger.new($stdout, :warn)
          end
        end

.title Removing Active Record
.text
  %p
    Now that you have a mongoid.yml you can't wait to delete that pesky database.yml,
    right? Do it and you'll start getting ActiveRecord errors all over the place.
    You don't need ActiveRecord unless you're trying to use Mongo in concert
    with a SQL database. Here's how you remove ActiveRecord from the most
    recent version of Rails 3:

  %ul
    %li Open <tt>yourapp/config/application.rb</tt>
    %li
      Near the top, remove the line <tt>require 'rails/all'</tt> and add the following
      three lines so you end up with this:
  %pre
    %code.language-ruby
      :preserve
        require "action_controller/railtie"
        require "action_mailer/railtie"
        require "active_resource/railtie"
  %ul
    %li Start up your app and welcome yourself to a life without ActiveRecord!

.title Other Languages
.text
  %p
    By default Mongoid adds the I18n translation file for English. However adding new
    languages is easy. In your application initializer (for Rails 3 it can be in <tt>config/initializers/mongoid.rb</tt>), just add the code:

  %pre
    %code.language-ruby
      :preserve
        # adds Spanish
        Mongoid.add_language("es")

  %p Available languages for Mongoid are:
  %ul
    %li <tt>es</tt>: Spanish
    %li <tt>fr</tt>: French
    %li <tt>it</tt>: Italian
    %li <tt>pl</tt>: Polish
    %li <tt>pt</tt>: Portuguese
    %li <tt>sv</tt>: Swedish

  %p You can also just include them all by:

  %pre
    %code.language-ruby
      :preserve
        # include all language that Mongoid knows about
        Mongoid.add_language("*")


.title Not Using Rails 3?
.text
  You can initialize Mongoid in its configuration block, either by calling the above
  mentioned methods directly or using <tt>from_hash</tt> to load in a mongoid.yml:

  %pre
    %code.language-ruby
      :preserve
        Mongoid.configure do |config|
          name = "control_development"
          host = "localhost"
          config.master = Mongo::Connection.new.db(name)
          config.slaves = [
            Mongo::Connection.new(host, 27018, :slave_ok => true).db(name)
          ]
          config.persist_in_safe_mode = false
        end

  OR

  %pre
    %code.language-ruby
      :preserve
        file_name = File.join(File.dirname(__FILE__), "..", "config", "mongoid.yml")
        @settings = YAML.load(ERB.new(File.new(file_name).read).result)

        Mongoid.configure do |config|
          config.from_hash(@settings[ENV['RACK_ENV']])
        end
