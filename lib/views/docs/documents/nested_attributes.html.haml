- content_for :head do
  %title Mongoid: Documents [Nested attributes] 

%h1 Nested attributes

%p 
  Nested attributes allow you to save attributes on associated records 
  through the parent. By default nested attribute updating is turned off for 
  referential associations and turned on for embed associations. 
  

%p 
  You can enable it using the 
  %tt accepts_nested_attributes_for
  class method. 
  
%p When you enable nested attributes an attribute writer is defined on the model.

%p 
  The attribute writer is named after the association, 
  which means that in the following example, four new methods are 
  added to your model:
 
%p
  %tt author_attributes=(attributes)  
%p
  %tt pages_attributes=(attributes)
%p
  %tt publisher_attributes=(attributes)
%p
  %tt reviews_attributes=(attributes)
 
:coderay
  #!ruby
  
  class Book
    include Mongoid::Document
    has_one :author
    has_many :pages
    embeds_one :publisher
    embeds_many :reviews

    accepts_nested_attributes_for :author, :pages
  end  

%p 
  Note that the 
  %tt :autosave 
  option is automatically enabled on every 
  association that 
  %tt accepts_nested_attributes_for 
  is used for.

%h3 One-to-one

%p Consider a Member model that has one Avatar:

:coderay  
  #!ruby
  class Member
    include Mongoid::Document 
    has_one :avatar
    accepts_nested_attributes_for :avatar
  end

%p Enabling nested attributes on a one-to-one association allows you to create the member and avatar in one go:
    
:coderay  
  #!ruby
  params = { :member => { :name => 'Jack', :avatar_attributes => { :icon => 'smiling' } } }
  member = Member.create(params[:member])
  member.avatar.id # => 2
  member.avatar.icon # => 'smiling'

%p It also allows you to update the avatar through the member:

:coderay  
  #!ruby
  params = { :member => { :avatar_attributes => { :id => '2', :icon => 'sad' } } }
  member.update_attributes params[:member]
  member.avatar.icon # => 'sad'

%p 
  By default you will only be able to set and update attributes on the associated model.
  If you want to destroy the associated model through the 
  %tt attributes
  hash, you have to 
  enable it first using the 
  %tt :allow_destroy 
  option.

:coderay  
  #!ruby
  class Member
    include Mongoid::Document 
    has_one :avatar
    accepts_nested_attributes_for :avatar, :allow_destroy => true
  end

%p  
  Now, when you add the 
  %tt _destroy 
  key to the 
  %tt attributes 
  hash, 
  with a value that evaluates to true, you will destroy the associated model:

:coderay  
  #!ruby
  member.avatar_attributes = { :id => '2', :_destroy => '1' }
  member.avatar.marked_for_destruction? # => true
  member.save
  member.reload.avatar # => nil

%p Note that the model will not be destroyed until the parent is saved.

%h3 One-to-many

%p Consider a member that has a number of posts:

:coderay  
  #!ruby
  class Member
    include Mongoid::Document 
    has_many :posts
    accepts_nested_attributes_for :posts
  end

%p 
  You can now set or update attributes on an associated post 
  model through the 
  %tt attribute 
  hash.

%p 
  For each hash that does not have an 
  %tt id key 
  a new record will be instantiated, 
  unless the hash also contains a 
  %tt _destroy 
  key that evaluates to true.
 
:coderay  
  #!ruby
  params = { :member => {
    :name => 'joe', :posts_attributes => [
      { :title => 'Kari, the awesome Ruby documentation browser!' },
      { :title => 'The egalitarian assumption of the modern citizen' },
      { :title => '', :_destroy => '1' } # this will be ignored
    ]
  }}

  member = Member.create(params['member'])
  member.posts.length # => 2
  member.posts.first.title # => 'Kari, the awesome Ruby documentation browser!'
  member.posts.second.title # => 'The egalitarian assumption of the modern citizen'
  
%p 
  You may also set a 
  %tt :reject_if proc 
  to silently ignore any new record hashes if they fail to pass your criteria. 
  For example, the previous example could be rewritten as:

:coderay  
  #!ruby
  class Member
    include Mongoid::Document 
    has_many :posts
    accepts_nested_attributes_for :posts, :reject_if => proc { |attributes| attributes['title'].blank? }
  end

  params = { :member => {
    :name => 'joe', :posts_attributes => [
      { :title => 'Kari, the awesome Ruby documentation browser!' },
      { :title => 'The egalitarian assumption of the modern citizen' },
      { :title => '' } # this will be ignored because of the :reject_if proc
    ]
  }}

  member = Member.create(params['member'])
  member.posts.length # => 2
  member.posts.first.title # => 'Kari, the awesome Ruby documentation browser!'
  member.posts.second.title # => 'The egalitarian assumption of the modern citizen'
  
%p 
  Alternatively, 
  %tt :reject_if 
  also accepts a symbol for using methods:

:coderay  
  #!ruby
  class Member
    include Mongoid::Document
    has_many :posts
    accepts_nested_attributes_for :posts, :reject_if => :new_record?
  end

  class Member
    include Mongoid::Document
    has_many :posts
    accepts_nested_attributes_for :posts, :reject_if => :reject_posts

    def reject_posts(attributed)
      attributed['title'].blank?
    end
  end

%p 
  If the hash contains an 
  %tt id key 
  that matches an already associated record, the matching record will be modified:

:coderay  
  #!ruby

  member.attributes = {
    :name => 'Joe',
    :posts_attributes => [
      { :id => 1, :title => '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!' },
      { :id => 2, :title => '[UPDATED] other post' }
    ]
  }

  member.posts.first.title # => '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!'
  member.posts.second.title # => '[UPDATED] other post'
 
%p 
  By default the associated records are protected from being destroyed. 
  If you want to destroy any of the associated records through the 
  %tt attributes hash   
  , you have to enable it first using the 
  %tt :allow_destroy option. 
  This will 
  allow you to also use the 
  %tt _destroy 
  key to destroy existing records:

:coderay  
  #!ruby
  class Member
    include Mongoid::Document
    has_many :posts
    accepts_nested_attributes_for :posts, :allow_destroy => true
  end

  params = { :member => {
    :posts_attributes => [{ :id => '2', :_destroy => '1' }]
  }}

  member.attributes = params['member']
  member.posts.detect { |p| p.id == 2 }.marked_for_destruction? # => true
  member.posts.length # => 2
  member.save
  member.reload.posts.length # => 1

%h3 Many-to-Many

%p The behaviour is the same as in One-To-Many associations.

:coderay  
  #!ruby
  class Person
    include Mongoid::Document
    has_and_belongs_to_many :social_circles      
    accepts_nested_attributes_for :social_circles
  end

  class SocialCircle
    include Mongoid::Document
    has_and_belongs_to_many :people
  end

%h3 Saving
 
%p 
  All changes to models, including the destruction of those marked for destruction,
  are saved and destroyed automatically and atomically when the parent model is saved. 

