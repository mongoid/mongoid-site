- content_for :head do
  %title Mongoid: Relations [Referenced: 1-1]

%h1 referenced one to one

%p= image_tag "/images/referenced-1-1.png", class: "diagram"

%p
  One to one relationships where the children are referenced in the parent
  document are defined using Mongoid's <tt>has_one</tt> and
  <tt>belongs_to</tt> macros.

%h3 defining

%p
  The parent document of the relation should use the <tt>has_one</tt>
  macro to indicate is has 1 referenced child, where the document that
  is referenced in it uses <tt>belongs_to</tt>.

:coderay
  #!ruby

  class Person
    include Mongoid::Document
    has_one :game
  end

  class Game
    include Mongoid::Document
    field :name, type: String
    belongs_to :person
  end

%p
  Definitions are required on both sides to the relation in order for it to
  work properly.

%h3 storage

%p
  When defining a relation of this nature, each document is stored in it's
  respective collection, but the child document contains a "foreign key"
  reference to the parent.

:coderay
  #!ruby

  # The parent person document.
  { "_id" : ObjectId("4d3ed089fb60ab534684b7e9") }

  # The child post document.
  {
    "_id" : ObjectId("4d3ed089fb60ab534684b7e9"),
    "person_id" : ObjectId("4d3ed089fb60ab534684b7f1")
  }

%h3 accessors

%p
  Accessing the relations is handled through the methods created based on the
  names of the relations. The following example shows basic access on both
  sides of the relation.

:coderay
  #!ruby

  # Return the child game.
  person.game

  # Set the child game.
  person.game = [ Game.new ]

  # Return the parent person.
  game.person

  # Set the parent person.
  game.person = Person.new

%h3 building and creating

%p
  From the parent side, documents in the referenced child can be initialized or
  created using the specially defined methods.

:coderay
  #!ruby

  # Create a new child game given the provided attributes.
  person.build_game(name: "Tron")

  # Create a persisted child game.
  person.create_game(name: "Tron")

  # Replace the parent with a new one from the attributes.
  game.build_person(title: "Prince")

  # Replace the parent with a newly saved one from the attributes.
  game.create_person(title: "Prince")

%h3 removal

%p
  Documents in the referenced many can be removed by either calling delete
  on the child or setting it to nil.

:coderay
  #!ruby

  # Delete the child document
  person.game.delete
  person.game.destroy
  person.game = nil

%h3 polymorphic behaviour

%p
  When a child referenced document can belong to more than one type of parent
  document, you can tell Mongoid to support this by adding the <tt>as</tt>
  option to the definition on the parents, and the <tt>polymorphic</tt>
  option on the child.

:coderay
  #!ruby

  class Arcade
    include Mongoid::Document
    has_one :game, as: :playable
  end

  class Person
    include Mongoid::Document
    has_one :game, as: :playable
  end

  class Game
    include Mongoid::Document
    belongs_to :playable, polymorphic: true
  end
