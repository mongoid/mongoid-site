- content_for :head do
  %title Mongoid: Relations [Referenced: 1-n]

%h1 referenced one to many

%p= image_tag "/images/referenced-1-n.png", class: "diagram"

%p
  One to many relationships where the children are stored in a
  separate collection from the parent document are defined using
  Mongoid's <tt>has_many</tt> and <tt>belongs_to</tt> macros. This
  exhibits similar behaviour to Active Record.

%h3 defining

%p
  The parent document of the relation should use the <tt>has_many</tt>
  macro to indicate is has <i>n</i> number of referenced children, where
  the document that is referenced uses <tt>belongs_to</tt>.

:coderay
  #!ruby

  class Person
    include Mongoid::Document
    has_many :posts
  end

  class Post
    include Mongoid::Document
    field :title, type: String
    belongs_to :person
  end

%p
  Definitions are required on both sides to the relation in order for it to
  work properly.

%h3 storage

%p
  When defining a relation of this nature, each document is stored in it's
  respective collection, but the child document contains a "foreign key"
  reference to the parent.

:coderay
  #!ruby

  # The parent person document.
  { "_id" : ObjectId("4d3ed089fb60ab534684b7e9") }

  # The child post document.
  {
    "_id" : ObjectId("4d3ed089fb60ab534684b7e9"),
    "person_id" : ObjectId("4d3ed089fb60ab534684b7f1")
  }

%h3 accessors

%p
  Accessing the relations is handled through the methods created based on the
  names of the relations. The following example shows basic access on both
  sides of the relation.

:coderay
  #!ruby

  # Return the child posts.
  person.posts

  # Set the child posts.
  person.posts = [ Post.new ]

  # Return the parent person.
  post.person

  # Set the parent person.
  post.person = Person.new

%h3 building and creating

%p
  From the parent side, documents in the referenced child can be appended to using
  traditional array syntax or the special association proxy methods. On the
  child side the only option is to replace the existing with a newly built or
  created document.

:coderay
  #!ruby

  # Append one or many child posts, saving them if the person is persisted.
  person.posts << Post.new
  person.posts.push(Post.new)
  person.posts.concat([ post ])

  # Appends and returns a new child post from the attirbutes.
  person.posts.build(title: "Berlin never sleeps.")
  person.posts.new(title: "Berlin never sleeps.")

  # Appends, saves, and returns a new child post from the attirbutes.
  person.posts.create(title: "Berlin is far cooler than New York.")

  # Appends, saves, and returns a new child post from the attributes,
  # raising an error if validation fails.
  person.posts.create!(title: "Berlin is bad for the liver.")

  # Replace the parent with a new one from the attributes.
  post.build_person(title: "Prince")

  # Replace the parent with a newly saved one from the attributes.
  post.create_person(title: "Prince")

%h3 removal

%p
  Documents in the referenced many can be removed in several different manners,
  either through the relation, criteria, or accessors.

:coderay
  #!ruby

  # Delete all referenced documents
  person.posts.delete_all
  person.posts.clear
  person.posts = []

  # Delete all matching referenced documents.
  person.posts.delete_all(conditions: { title: "Berlin" })
  person.posts.where(title: "Berlin").delete_all

  # Destroy all referenced documents, running destroy callbacks.
  person.posts.destroy_all

  # Destroy all matching referenced documents, running callbacks.
  person.posts.destroy_all(conditions: { title: "Berlin" })
  person.posts.where(title: "Berlin").destroy_all

  # Delete the parent referenced document.
  post.person.delete

  # Destroy the parent referenced document.
  post.person.destroy

%h3 finding

%p
  Finding documents in the referenced children is handled through <tt>find</tt>
  or by using chained criteria on the relation.

:coderay
  #!ruby

  # Find a child by a single or multiple ids.
  person.posts.find(id)
  person.posts.find([ id_one, id_two ])

  # Find matching referenced children.
  person.posts.where(title: "Berlin")

  # Find or create a matching (saved) child.
  person.posts.find_or_create_by(title: "Berlin")

  # Find or initialize a matching (new) child.
  person.posts.find_or_initialize_by(title: "Berlin")

  # Do any children exist that are persisted?
  person.posts.exists?

  # Paginate the referenced child documents.
  person.posts.paginate(page: 2, per_page: 20)

%h3 polymorphic behaviour

%p
  When a child referenced document can belong to more than one type of parent
  document, you can tell Mongoid to support this by adding the <tt>as</tt>
  option to the definition on the parents, and the <tt>polymorphic</tt>
  option on the child.

:coderay
  #!ruby

  class Company
    include Mongoid::Document
    has_many :posts, as: :postable
  end

  class Person
    include Mongoid::Document
    has_many :posts, as: :postable
  end

  class Post
    include Mongoid::Document
    belongs_to :postable, polymorphic: true
  end
