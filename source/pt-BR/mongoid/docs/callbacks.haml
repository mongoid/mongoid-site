- content_for :head do
  %title Mongoid: Callbacks

%h1 Callbacks

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Document Callbacks", "#callbacks"
      %li= link_to "Relation Callbacks", "#relation_callbacks"
      %li= link_to "Observers", "#observers"

%section#callbacks
  %h2 Document Callbacks

  %p
    Mongoid supports the following callbacks:

    %ul
      %li <code>after_initialize</code>
      %li <code>after_build</code>
      %li <code>before_validation</code>
      %li <code>after_validation</code>
      %li <code>before_create</code>
      %li <code>around_create</code>
      %li <code>after_create</code>
      %li <code>after_find</code> <span class="label label-info">Since 3.1.0</span>
      %li <code>before_update</code>
      %li <code>around_update</code>
      %li <code>after_update</code>
      %li <code>before_upsert</code>
      %li <code>around_upsert</code>
      %li <code>after_upsert</code>
      %li <code>before_save</code>
      %li <code>around_save</code>
      %li <code>after_save</code>
      %li <code>before_destroy</code>
      %li <code>around_destroy</code>
      %li <code>after_destroy</code>

  %p
    Callbacks are available on any document, whether it is embedded within
    another document or not. Note that to be efficient, Mongoid only fires
    the callback of the document that the persistence action was executed on.
    This is that Mongoid aims to support large hierarchies and to handle
    optimized atomic updates callbacks can't be firing all over the document
    hierarchy.

  .well
    %table
      %tr
        %td.achtung= image_tag "/images/achtung.png"
        %td.note
          %p
            Using callbacks for domain logic is a bad design practice, and can
            lead to unexpected errors that are hard to debug when callbacks in
            the chain halt execution. It is our recommendation to only use them
            for cross-cutting concerns, like queueing up background jobs.

  :coderay
    #!ruby
    class Article
      include Mongoid::Document
      field :name, type: String
      field :body, type: String
      field :slug, type: String

      before_create :send_message

      after_save do |document|
        # Handle callback here.
      end

      protected
      def send_message
        # Message sending code here.
      end
    end

  %p
    Callbacks are coming from Active Support, so you can use the new
    syntax as well:

  :coderay
    #!ruby
    class Article
      include Mongoid::Document
      field :name, type: String

      set_callback(:create, :before) do |document|
        # Message sending code here.
      end
    end

%section#relation_callbacks
  %h2
    Relation Callbacks

  %span.label.label-info Since 3.1.0

  %p
    Mongoid has a set of callbacks that are specific to collection based relations - these are:

    %ul
      %li <code>after_add</code>
      %li <code>after_remove</code>
      %li <code>before_add</code>
      %li <code>before_remove</code>

    Each time a document is added or removed from any of the following relations,
    the respective callbacks are fired: <code>embeds_many</code>,
    <code>has_many</code>, and <code>has_and_belongs_to_many</code>.


%section#observers
  %h2 Observers

  %p
    Observer classes respond to life cycle callbacks to implement trigger-like
    behavior outside the original class. This is a great way to reduce the
    clutter that normally comes when the model class is burdened with
    functionality that doesn't pertain to the core responsibility of the
    class. Mongoid's observers work similar to ActiveRecord's. Example:

  :coderay
    #!ruby
    class ArticleObserver < Mongoid::Observer
      def after_save(article)
        Notifications.article("admin@do.com", "New article", article).deliver
      end
    end

  %p
    Observers are available for any document, whether it is embedded within
    another document or not. Note that to be efficient, Mongoid only fires
    the observers of the document that the persistence action was executed on.
    This is that Mongoid aims to support large hierarchies and to handle
    optimized atomic updates callbacks can't be firing all over the document
    hierarchy.

  %h3 Instantiation

  %p
    Observers will not be invoked unless they are instantiated first. If you are
    using Rails, Mongoid will instantiate your observers automatically as long as
    you register them in your <code>config/application.rb</code> file like so:

  :coderay
    #!ruby
    config.mongoid.observers = :article_observer, :audit_observer

  %p
    If you're not using Rails, then you will have to load and register your
    observers directly with Mongoid and afterwards instruct Mongoid to instantiate
    them before they will work. Instantiating an observer registers it with its
    observed model(s) so they will need to be loaded beforehand.

  :coderay
    #!ruby
    require "article_observer"
    require "audit_observer"
    Mongoid.observers = ArticleObserver, AuditObserver
    Mongoid.instantiate_observers

  %h3 Mapping

  %p
    Observers will by default be mapped to the class with which they share a
    name. So CommentObserver will be tied to observing Comment, ProductManagerObserver
    to ProductManager, and so on. If you want to name your observer differently
    than the class you're interested in observing, you can use the Observer.observe
    class method which takes either the concrete class (Product) or a symbol for
    that class (:product). If an observer needs to watch more than one kind of object,
    this can be specified with multiple arguments.

  :coderay
    #!ruby
    class AuditObserver < Mongoid::Observer
      observe :account, :balance

      def after_update(record)
        AuditTrail.new(record, "UPDATED")
      end
    end
