- content_for :head do
  %title Mongoid: Performance

%h1 Performance

%p
  The data used in the metrics is that of what would
  be considered a fairly standard application in MongoDB that Mongoid
  could manage.

  %ul
    %li 1,000,000 documents in the main collection
    %li 10,000 embedded documents on a root document (1-n)
    %li 10,000 embedded documents on a root document (1-1)
    %li 100,000 referenced documents to another collection (1-n)
    %li 100,000 referenced documents to another collection (1-1)
    %li 10,000 referenced documents to another collection (n-n)

%p.italic
  * Performance metrics done on a 2.93 GHz i7 iMac / 8GB RAM,
  OSX 10.7, Mongoid 2.2.0

%p.italic
  * The script to run the performance metrics can be found
  <a href="https://github.com/mongoid/mongoid/blob/master/perf/benchmark.rb">here</a>.

%h2 Notes

%p
  Many to many relations are not recommended for over 10,000 documents when using
  MRI due to the garbage collector taking over 90% of the run time when
  calling #build or #create. This is due to the large array appending occuring
  in these operations.

.well
  %table
    %tr
      %td.achtung= image_tag "/images/achtung.png"
      %td.note
        When performing appends to one to many relations we execute in batch
        (appending all at once instead of one at a time) due to the slow performance of
        MongoDB's $push atomic operator.

%table.table.table-bordered.table-striped
  %thead
    %tr
      %th Operation
      %th Time
      %th Ops/sec
  %tr
    %td.header{ colspan: 3 } root (1,000,000 operations)
  %tr
    %td <code>Model#create</code>
    %td 417.93
    %td 2,392
  %tr
    %td <code>Model#all.each</code>
    %td 40.87
    %td 24,476
  %tr
    %td <code>Model#find</code>
    %td 0.001
    %td
  %tr
    %td <code>Model#save</code>
    %td 487.93
    %td 2,049
  %tr
    %td <code>Model#update_attribute</code>
    %td 339.54
    %td 2,945
  %tr
    %td.header{ colspan: 3 } embedded 1-n (10,000 operations)
  %tr
    %td <code>relation#build</code>
    %td 2.253
    %td 4,438
  %tr
    %td <code>relation#clear</code>
    %td 1.230
    %td 8,130
  %tr
    %td <code>relation#create</code>
    %td 4.899
    %td 2,041
  %tr
    %td <code>relation#count</code>
    %td 0.011
    %td
  %tr
    %td <code>relation#delete_all</code>
    %td 1.377
    %td 7,262
  %tr
    %td <code>relation#push</code> (batch)
    %td 3.496
    %td 2,860
  %tr
    %td <code>relation#each</code>
    %td 0.027
    %td 370,370
  %tr
    %td <code>relation#find</code>
    %td 0.044
    %td
  %tr
    %td <code>relation#delete</code>
    %td 0.045
    %td
  %tr
    %td.header{ colspan: 3 } embedded 1-1 (10,000 operations)
  %tr
    %td <code>relation#=</code>
    %td 3.902
    %td 2,562
  %tr
    %td.header{ colspan: 3 } relational 1-n (100,000 operations)
  %tr
    %td <code>relation#build</code>
    %td 18.521
    %td 5,399
  %tr
    %td <code>relation#clear</code>
    %td 4.085
    %td 24,479
  %tr
    %td <code>relation#create</code>
    %td 45.464
    %td 2,199
  %tr
    %td <code>relation#count</code>
    %td 0.051
    %td
  %tr
    %td <code>relation#delete_all</code>
    %td 5.596
    %td 17,869
  %tr
    %td <code>relation#push</code> (batch)
    %td 34.551
    %td 2,894
  %tr
    %td <code>relation#each</code>
    %td 0.055
    %td 1,818,181
  %tr
    %td <code>relation#find</code>
    %td 0.020
    %td
  %tr
    %td <code>relation#delete</code>
    %td 0.410
    %td
  %tr
    %td.header{ colspan: 3 } relational 1-1 (100,000 operations)
  %tr
    %td <code>relation#=</code>
    %td 54.991
    %td 1,818
  %tr
    %td.header{ colspan: 3 } relational n-n (10,000 operations)
  %tr
    %td <code>relation#build</code>
    %td 1.325
    %td 7,547
  %tr
    %td <code>relation#clear</code>
    %td 0.350
    %td 28,571
  %tr
    %td <code>relation#count</code>
    %td 0.001
    %td
  %tr
    %td <code>relation#delete_all</code>
    %td 0.001
    %td 10,000,000
  %tr
    %td <code>relation#push</code> (batch)
    %td 2.628
    %td 3,805
  %tr
    %td <code>relation#each</code>
    %td 0.005
    %td 2,000,000
  %tr
    %td <code>relation#find</code>
    %td 0.010
    %td
  %tr
    %td <code>relation#delete</code>
    %td 0.060
    %td
  %tr
    %td.header{ colspan: 3 } eager loading 1-1 (10,000 docs)
  %tr
    %td <code>Model#each</code> (without eager load)
    %td 5.617
    %td 1,780
  %tr
    %td <code>Model#includes</code> (with eager load)
    %td 2.966
    %td 3,371
  %tr
    %td.header{ colspan: 3 } eager loading 1-n (10,000 docs)
  %tr
    %td <code>Model.all#each</code> (without eager load)
    %td 4.300
    %td 2,325
  %tr
    %td <code>Model#includes</code> (with eager load)
    %td 2.094
    %td 4,775
