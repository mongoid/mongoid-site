- content_for :head do
  %title Mongoid: Rails

%h1 Rails

%p
  Mongoid was built and targeted towards Rails applications, even though it
  will work in any environment. However if you are using Rails consult the
  next two sections on how Mongoid hooks into a Rails application.

%p
  For a sample Rails application and examples of domain modeling, please see
  the Mongoid demo application,
  <a href="http://github.com/mongoid/echo">Echo</a>. Note that currently the
  application is only models and specs.

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Multi-Parameter Attributes", "#multi_param"
      %li= link_to "Railties", "#railties"
      %li= link_to "Rake Tasks", "#rake"

%section#multi_param
  %h2 Multi Parameter Attributes

  %p
    If you want to use multi-paramater attributes with Rails, you will
    need to include an extra Mongoid module to support it.

  .well
    %table
      %tr
        %td.achtung= image_tag "/images/achtung.png"
        %td.note
          The reason for needing to include a module is due to the fact that
          we believe this is not a very usable way of handling date/time
          entry in forms, with a complex implementation.


  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::MultiParameterAttributes
    end

%section#railties
  %h2 Railties

  %p
    Mongoid provides some railties and initializers that one should be
    aware of when writing a Rails application with Mongoid.

  %h3 Configuration

  %p
    You can set Mongoid configuration options in your <tt>application.rb</tt>
    along with other Rails environment specific options by accessing
    <code>config.mongoid</code>. Options set here will override those set in
    your <code>config/mongoid.yml</code>.

  :coderay
    #!ruby
    module MyApplication
      class Application < Rails::Application
        config.mongoid.logger = Logger.new($stdout, :warn)
        config.mongoid.persist_in_safe_mode = true
      end
    end

  %h3 Model Preloading

  %p
    In order to properly set up single collection inheritance, Mongoid
    needs to preload all models before every request in development mode.
    This can get slow, so if you are not using any inheritance it is
    recommended you turn this feature off.

  :coderay
    #!ruby
    config.mongoid.preload_models = false

  %h3 Exceptions

  %p
    Similar to Active Record, Mongoid tells raise to return specific http
    codes when some errors are raised.

    %ul
      %li <code>Mongoid::Errors::DocumentNotFound</code> : 404
      %li <code>Mongoid::Errors::Validations</code> : 422

  %h3 Unicorn and Passenger

  %p
    When using Unicorn or Passenger, each time a child process is forked
    when using app preloading or smart spawning, Mongoid will automatically
    reconnect to the master database. If you are doing this in your
    application manually you may remove your code.

%section#rake
  %h2 Rake Tasks

  %p
    Mongoid provides the following rake tasks when used in a Rails 3 environment:

  %ul
    %li
      <code>db:create</code>: Exists only for dependency purposes, does not actually
      do anything.
    %li
      <code>db:create_indexes</code>: Reads all index definitions from the models and
      attempts to create them in the database.
    %li
      <code>db:remove_indexes</code>: Reads all secondary index definitions from the
      models and attempts to remove indexes that are not defined.
    %li
      <code>db:drop</code>: Drops all collections in the database with the exception of
      the system collections.
    %li
      <code>db:migrate</code>: Exists only for dependency purposes, does not actually
      do anything.
    %li
      <code>db:purge</code>: Deletes all data, including indexes, from the database.
      <span class="label label-info">Since 3.1.0</span>
    %li
      <code>db:schema:load</code>: Exists only for framework dependency purposes, does
      not actually do anything.
    %li
      <code>db:seed</code>: Seeds the database from db/seeds.rb
    %li
      <code>db:setup</code>: Creates indexes and seeds the database.
    %li
      <code>db:test:prepare</code>: Exists only for framework dependency purposes, does
      not actually do anything.
