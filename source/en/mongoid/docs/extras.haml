- content_for :head do
  %title Mongoid: Extras

%h1 Extras

%p
  Mongoid has some useful extra features that can be used in applications.

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Caching", "#caching"
      %li= link_to "Paranoia", "#paranoia"
      %li= link_to "Versioning", "#versioning"
      %li= link_to "Timestamping", "#timestamps"

%section#caching
  %h2 Caching

  %p
    Out of the box, Mongoid wraps the MongoDB Ruby Driver's cursor in order
    to be memory efficient for large queries and data sets. However if you
    want the query to load all matching documents in memory and return
    them on <i>n</i> iterations without hitting the database again you
    may cache a criteria:

  %p
    To cache on a per-query basis:

  :coderay
    #!ruby
    Person.where(first_name: "Franziska").cache

%section#paranoia
  %h2 Paranoid Documents

  %p
    There may be times when you don't want documents to actually get deleted
    from the database, but "flagged" as deleted. Mongoid provides a Paranoia
    module to give you just that.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Paranoia
    end

    person.delete   # Sets the deleted_at field to the current time, ignoring callbacks.
    person.delete!  # Permanently deletes the document, ignoring callbacks.
    person.destroy  # Sets the deleted_at field to the current time, firing callbacks.
    person.destroy! # Permanently deletes the document, firing callbacks.
    person.restore  # Brings the "deleted" document back to life.

  %p
    The documents that have been "flagged" as deleted (soft deleted)
    can be accessed at any time by calling the <code>deleted</code>
    class method on the class.

  :coderay
    #!ruby
    Person.deleted # Returns documents that have been "flagged" as deleted.

%section#versioning
  %h2 Versioning

  %p
    Mongoid supports simple versioning through inclusion of the
    <code>Mongoid::Versioning</code> module. Including this module will create a
    versions embedded relation on the document that it will append to on
    each save. It will also update the version number on the document,
    which is an integer.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Versioning
    end

  %p
    You can also set a <code>max_versions</code> setting, and Mongoid will only
    keep the max most recent versions.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Versioning

      # keep at most 5 versions of a record
      max_versions 5
    end

  %p
    You may skip versioning at any point in time by wrapping the persistence
    call in a <code>versionless</code> block.

  :coderay
    #!ruby
    person.versionless do |doc|
      doc.update_attributes(name: "Theodore")
    end

%section#timestamps
  %h2 Timestamping

  %p
    Mongoid supplies a timestamping module in <code>Mongoid::Timestamps</code> which
    can be included to get basic behavior for <code>created_at</code> and
    <code>updated_at</code> fields.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Timestamps
    end

  %p
    You may also choose to only have specific timestamps for creation or
    modification.

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      include Mongoid::Timestamps::Created
    end

    class Post
      include Mongoid::Document
      include Mongoid::Timestamps::Updated
    end

  %p
    If you want to turn off timestamping for specific calls, use the timeless
    method:

  :coderay
    #!ruby
    person.timeless.save
    Person.timeless.create!
