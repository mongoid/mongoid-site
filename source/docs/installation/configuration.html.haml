- content_for :head do
  %title Mongoid: Installation [Configuration]

%h1 configuration

%p
  Mongoid configuration can be done through a <tt>mongoid.yml</tt> that
  specifies your options and database connections. The simplest configuration
  is as follows, which uses default options and connects to a single local
  master db on port 27017:

:coderay
  #!yaml
  host: localhost
  database: godfather

%p Note, this configuration will NOT work inside rails.

%h3 rails applications

%p
  You can generate a config file by executing the generator and then editing
  <tt>myapp/config/mongoid.yml</tt> to your heart's desire. Mongoid will
  then handle everything else from there.

:coderay
  #!ruby
  $ rails g mongoid:config

%p
  This will create a configuration file with the Rails specific environment
  sections that that looks like this:

:coderay
  #!yaml
  development:
    host: localhost
    database: godfather_development

  test:
    host: localhost
    database: godfather_test

  # set these environment variables on your prod server
  production:
    host: <%= ENV['MONGOID_HOST'] %>
    port: <%= ENV['MONGOID_PORT'] %>
    username: <%= ENV['MONGOID_USERNAME'] %>
    password: <%= ENV['MONGOID_PASSWORD'] %>
    database: <%= ENV['MONGOID_DATABASE'] %>
    # slaves:
    #   - host: slave1.local
    #     port: 27018
    #   - host: slave2.local
    #     port: 27019


%p
  Now that you have a <tt>mongoid.yml</tt> you can't wait to delete that
  pesky <tt>database.yml</tt>, right? Do it and you'll start getting
  <tt>ActiveRecord</tt> errors all over the place.
  You don't need ActiveRecord unless you're trying to use Mongo in concert
  with a SQL database. Here's how you remove ActiveRecord from the most
  recent version of Rails 3...

%p
  Open <tt>myapp/config/application.rb</tt> and near the top, remove the line
  <tt>require 'rails/all'</tt> and add the following
  three lines so you end up with this:

:coderay
  #!ruby
  require "action_controller/railtie"
  require "action_mailer/railtie"
  require "active_resource/railtie"
  require "rails/test_unit/railtie"
  # require "sprockets/railtie" # Uncomment this line for Rails 3.1+

%h3 sinatra, padrino, and others

%p
  You can create your <tt>mongoid.yml</tt> and place it anywhere you like.
  Just be sure that on application initialization you do the following:

:coderay
  #!ruby
  Mongoid.load!("path/to/your/mongoid.yml")

%p
  If you want to configure Mongoid programatically, this is possible as
  well.

:coderay
  #!ruby
  Mongoid.configure do |config|
    config.master = Mongo::Connection.new.db("godfather")
  end

%h3 configuration options

%p
  Mongoid currently supports the following configuration options, either
  provided in the mongoid.yml or programatically (defaults in
  parenthesis).


%ul.config
  %li
    <tt>allow_dynamic_fields (true)</tt>: When attributes are not defined
    as fields but added to an object, they will get fields added for them
    dynamically and will get persisted. If set to false an error will get
    raised when attempting to set a value that has no field defined.
  %li
    <tt>autocreate_indexes (false)</tt>: When set to true Mongoid will attempt
    to create indexes each time a class is loaded. This is not recommended for
    any environment other than development or test.
  %li
    <tt>identity_map_enabled (false)</tt>: When set to true Mongoid will store
    documents loaded from the database in the identity map by their ids, so
    subsequent database queries for the same document in the same unit of
    work do not hit the database. This is only for relation queries at the
    moment. See the identity map documentation for more info.
  %li
    <tt>include_root_in_json (false)</tt>: When set to true mongoid will
    include the name of the root document and the name of each association
    as the root element when calling <tt>#to_json</tt> on a model.
  %li
    <tt>max_retries_on_connection_failure (0)</tt>: If you would like
    Mongoid to retry operations if a <tt>Mongo::ConnectionFailure</tt> occurs
    you may specify this option in your config. Mongoid will retry the
    operation every half second up to the limit that is set. This is
    particularly useful when using replica sets.
  %li
    <tt>parameterize_keys (true)</tt>: Tells Mongoid to convert basic special
    characters in composite keys to SEO friendly substrings.
  %li
    <tt>persist_in_safe_mode (false)</tt>: Tells Mongoid to perform all database
    operations in MongoDB's safe mode. This will cause the driver to double
    check operations and raise an error if they failed. Switching to true
    will be safe but will be a slight performance hit.
  %li
    <tt>preload_models (false)</tt>: Tells Mongoid to preload all application
    model classes on each request in environments where classes are not
    being cached. This should only be used by applications that use single
    collection inheritance due to performance issues with enabling this.
  %li
    <tt>raise_not_found_error (true)</tt>: Will raise a
    <tt>Mongoid::Errors::DocumentNotFound</tt> when attempting to find a
    document by an id that doesnt exist. When set to false will only return
    nil for the same query.
  %li
    <tt>skip_version_check (false)</tt>: If you are having issues
    authenticating against MongoHQ or MongoMachine because of access to the
    system collection being not allowed, set this to true.

%h3 Logging

%p
  You can define your own logger for Mongoid if you do not want to use the default
  Rails logger in your Rails' <tt>application.rb</tt>.

:coderay
  #!ruby
  module MyApplication
    class Application << Rails::Application
      config.mongoid.logger = Logger.new($stdout, :warn)
    end
  end

%p
  For custom logging outside of Rails, set the Mongoid logger directly.

:coderay
  #!ruby
  Mongoid.logger = Logger.new($stdout)

%p
  You can turn off logging by setting the logger to nil programatically
  or setting the logger to false in your mongoid.yml.

:coderay
  #!ruby
  logger: false
