- content_for :head do
  %title Mongoid: Indexing

%h1 indexing

%p
  You can define indexes on documents using the index macro. For unique indexes
  provide a unique options, otherwise no option is necessary.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :ssn
    index :ssn, unique: true
  end

%p
  You can define indexes on embedded document fields as well.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    embeds_many :addresses
    index "addresses.street"
  end

%p
  You can index on multiple fields and provide direction.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :first_name
    field :last_name
    index(
      [
        [ :first_name, Mongo::ASCENDING ],
        [ :last_name, Mongo::ASCENDING ]
      ],
      unique: true
    )
  end

  %p
    Indexes can be sparse:

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      field :ssn
      index :ssn, sparse: true
    end

%p
  Indexes can be run in the background in cases where they may take some time:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :ssn
    index :ssn, unique: true, background: true
  end

%p
  For geospacial indexes, make sure the field you are indexing is an <tt>Array</tt>.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :location, type: Array
    index [[ :location, Mongo::GEO2D ]], min: 200, max: 200
  end

%p
  You can have Mongoid define indexes for you on "foreign key" fields for
  relational associations. This only works on the relation macro that the
  foreign key is stored on.

:coderay
  #!ruby
  class Comment
    include Mongoid::Document
    belongs_to :post, index: true
    has_and_belongs_to_many :preferences, index: true
  end

%p
  When you want to create the indexes in the database, use the provided rake task:

:coderay
  #!ruby
  rake db:mongoid:create_indexes

%p
  If you want indexes autocreated when the model classes are loaded, add this
  configuration option to your mongoid.yml. Note this is <i>NOT</i> recommended for any
  production environment.

:coderay
  #!ruby
  defaults: &defaults
    autocreate_indexes: true


%h3 dropping indexes

%p
  When you want to remove an index, it must be done using the MongoDB index name.
  Therefore if you create a range index on the <i>birthday</i> date coluumn in the Person
  model in the Rails console, you would do it like this.

:coderay
  #!ruby
  :001 > Person.collection.ensure_index([['birthday',Mongo::DESCENDING]])

%p
  In order to delete that same index, you need to use the index name, not the index definition.
  The index name is <i>birthday</i>, but the index definition according to MongoDB will include
  an <i>_1</i> for an <i>Mongo::ASCENDING</i> range index and a <i>_-1</i> for a
  <i>Mongo::DESCENDING</i> range index.  To remove the above index in the Rails console, you would
  enter the following.

:coderay
  #!ruby
  :002 > Person.collection.drop_index('birthday_-1')

