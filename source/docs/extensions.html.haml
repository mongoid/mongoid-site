- content_for :head do
  %title Mongoid: Extensions

%h1 extensions

%h3 Optimistic Locking

%p
  Boxee's
  = link_to 'mongoid_optimistic_locking', 'https://github.com/burgalon/mongoid_optimistic_locking'
  helps to abstract "Update if current" method which may be used as a replacement for transactions in Mongo The gem is an addon over Mongoid ODM.

:coderay
  #!ruby
  # post.rb
  class Post
    include Mongoid::Document
    include Mongoid::Lockable

    field :text
  end

  # post_controller.rb
  class PostController < ApplicationController
      ## Adds an "UPDATE: ...some text..." to an existing document
      def add_update
          begin
              post = Post.find(params[:id])
              post.text += "---UPDATE---  " + params[:more_text]
              post.save_optimistically!
          rescue Mongoid::Errors::StaleDocument
              retry
          end
      end
  end

%h3 Fabrication

%p
  Paul Elliott's
  <a href="http://github.com/paulelliott/fabrication">Fabrication</a> gem is
  a slick object generation library. It support's Mongoid out of the box and
  provides a nice syntax for creating objects with ease for testing.

:coderay
  #!ruby
  Fabricator(:person) do
    title "Grand Poobah"
    addresses(count: 2) do |address, i|
      Fabricate(:address, streeet: "\#{i} Bond St.")
    end
  end

%h3 Voting

%p
  Alex Nguyen's
  <a href="https://github.com/vinova/voteable_mongo">voteable_mongo</a> gem
  add up / down voteability to Mongoid and MongoMapper. It takes advantage
  of document-oriented & in-place update to ensure data integrity and use
  only ONE database request to validate, update & get updated vote data.

:coderay
  #!ruby
  class Post
    include Mongoid::Document
    include Mongo::Voteable
    voteable self, :up => 1, :down => -2
  end

  class User
    include Mongoid::Document
    include Mongo::Voter
  end

  user.vote(post, :down)
  # => <Post .. votes: {"up"=>[], "down"=>[..], "count"=>1, "point"=>-2, ..}>
  user.voted?(post)
  # => true
  user.vote_value(post)
  # => :down

%h3 Will Paginate Mongoid

%p
  Lucas Souza's
  = link_to 'will_paginate_mongoid', 'https://github.com/lucasas/will_paginate_mongoid'
  gem becomes possible use
  %strong skip
  and
  %strong limit
  methods from Mongoid with
  = link_to 'will_paginate', 'https://github.com/mislav/will_paginate'

%p
  %strong Why I should use will_paginate_mongoid?

%p
  Will Paginate does not support Mongoid pagination (skip and limit methods) and
  this issue can cause performance problems.
  For example: If you use just will_paginate to paginate a model called User,
  in your controller you will call this:

:coderay
  #!ruby
  User.paginate :page => params[:page], :per_page => 10

%p
  The code above appears that will bring just 10 users from Mongodb, but
  will bring all users from Mongodb.

%p
  With will_paginate_mongoid this issue is solved because it creates the
  same pagination method but using
  = link_to 'skip', 'http://mongoid.org/docs/querying/criteria.html#skip'
  and
  = link_to 'limit', 'http://mongoid.org/docs/querying/criteria.html#limit'
  methods bringing just the needed objects from Mongodb.

%h3 Geo Spacial Search

%p
  Ryan Ong's
  <a href="http://github.com/ryanong/mongoid_spacial">mongoid_spacial</a> gem
  extends complex criteria options and simplifies geo spacial row creation,
  search and return. It adds a few helpers and it also adds a wrapper around
  the geoNear function that has support for pagination and automatic unit conversion.

:coderay
  #!ruby
  class River
    include Mongoid::Document
    include Mongoid::Spacial::Document

    field :name, type: String
    field :source, type: Array, spacial: true

    # set return_array to true if you do not want a hash returned all the time
    field :mouth, type: Array, spacial: {lat: :latitude, lng: :longitude, return_array: true }

    spacial_index :source
  end

  hudson = River.create(
    name: 'Hudson',
    # order agnostic
    source: {:lat => 44.106667, :lng => -73.935833},
    mouth: {:latitude => 40.703056, :longitude => -74.026667}
  )

  hudson.distance_from(:mouth, [-74,40], :mi)

  # Automatic unit conversion for spherical query, support for $near and $within
  River.where(:source.near(:sphere) => {:point => [-73.98, 40.77], :max => 5, :unit => :km})

  # Adds chainable paginatable geo_near finder.
  # Returns paginated sorted by distance list of rivers where
  # name = Hudson and skips the first row with pagination
  River.skip(1).where(name: 'Hudson').geo_near([-73.99756,40.73083], page: 1)

%h3 ClientSideValidations-Mongoid

%p
  Brian Cardarella's
  <a href="https://github.com/bcardarella/client_side_validations">ClientSideValidations</a> now has a
  <a href="https://github.com/dockyard/client_side_validaitons-mongoid">Mongoid plugin</a>.
