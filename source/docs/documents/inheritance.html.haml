- content_for :head do
  %title Mongoid: Documents [Inheritance]

%h1 inheritance

%p
  Mongoid supports inheritance in both root and embedded documents. In
  scenarios where documents are inherited from their fields, relations,
  validations and scopes get copied down into their child documents, but
  not vise-versa.

:coderay
  #!ruby
  class Canvas
    include Mongoid::Document
    field :name, type: String
    embeds_many :shapes
  end

  class Browser < Canvas
    field :version, type: Integer
    scope :recent, where(:version.gt => 3)
  end

  class Firefox < Browser
  end

  class Shape
    include Mongoid::Document
    field :x, type: Integer
    field :y, type: Integer
    embedded_in :canvas
  end

  class Circle < Shape
    field :radius, type: Float
  end

  class Rectangle < Shape
    field :width, type: Float
    field :height, type: Float
  end

%p
  In the above example, <tt>Canvas</tt>, <tt>Browser</tt> and
  <tt>Firefox</tt> will all save in the <tt>canvases</tt> collection.
  An additional attribute <tt>_type</tt> is stored in order
  to make sure when loaded from the database the correct document is
  returned. This also holds true for the embedded documents <tt>Circle</tt>,
  <tt>Rectangle</tt>, and <tt>Shape</tt>.

%h3 querying for subclasses

%p
  Querying for subclasses is handled in the normal manner, and although
  the documents are all in the same collection, queries will only return
  documents of the correct type, similar to Single Table Inheritance in
  ActiveRecord.

:coderay
  #!ruby
  # Returns Canvas documents and subclasses
  Canvas.where(name: "Paper")
  # Returns only Firefox documents
  Firefox.where(name: "Window 1")


%p
  To query for subclasses within an embedded collection you need to
  leverage the <tt>_type</tt> attribute in each subclassed object.
  <tt>Canvas</tt> and <tt>Shape</tt> documents, would not have it,
  but <tt>Browser</tt>, <tt>Firefox</tt>, <tt>Circle</tt>, and
  <tt>Rectangle</tt> would. Keep in mind that <tt>_type</tt>
  is a string that stores the name of the document's class, and
  as such can only be used to query for a specific subclass, and
  not anything it is a subclass of. 

%p
  If, for example, <tt>Rectangle</tt>
  was a subclass of <tt>Parallelogram</tt> which was in turn a 
  subclass of <tt>Shape</tt>, you could search the <tt>Canvas</tt>'s
  shapes collection for objects with a <tt>_type</tt> of <tt>"Parallelogram"</tt>
  but it would never return a <tt>Rectangle</tt> object, and vice-versa.

:coderay
  #!ruby
  # Returns all the Rectangle shapes in a previously
  # found Canvas
  my_canvas.shapes.where(_type: "Rectangle")
  # Returns no entries (see above) 
  my_canvas.shapes.where(_type: "Shape")
  # Returns all the Canvasas that have Circles
  Canvas.where("shapes._type"=>"Circle")
  # Returns no entries (see above)
  Canvas.where("shapes._type'=>"Shape")

%h3 associations

%p
  You can add any type of subclass to a has one or has many association,
  through either normal setting or through the build and create methods
  on the association:

:coderay
  #!ruby
  firefox = Firefox.new
  # Builds a Shape object
  firefox.shapes.build({ x: 0, y: 0 })
  # Builds a Circle object
  firefox.shapes.build({ x: 0, y: 0 }, Circle)
  # Creates a Rectangle object
  firefox.shapes.create({ x: 0, y: 0 }, Rectangle)

  rect = Rectangle.new(width: 100, height: 200)
  firefox.shapes
